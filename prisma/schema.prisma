generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  sku         String?     @unique
  buyPrice    Decimal     @db.Decimal(10, 2)  // Harga beli
  sellPrice   Decimal     @db.Decimal(10, 2)  // Harga jual
  stock       Int         @default(0)
  description String?
  supplier    String?
  expiryDate  DateTime
  imageUrl    String?
  categoryId  Int?
  category    Category?   @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  stockLogs   StockLog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String      @unique @default(uuid())
  customerName  String?
  cashierId     Int
  cashier       User        @relation(fields: [cashierId], references: [id])
  orderDate     DateTime    @default(now())
  status        String      @default("PENDING")  // PENDING, COMPLETED, CANCELLED
  totalAmount   Decimal     @db.Decimal(10, 2)
  amountPaid    Decimal?     @db.Decimal(10, 2)
  changeAmount  Decimal?    @db.Decimal(10, 2)
  paymentMethod String      @default("CASH")     // CASH, CARD, TRANSFER
  items         OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int
  buyPrice    Decimal  @db.Decimal(10, 2)  // Harga beli saat transaksi
  sellPrice   Decimal  @db.Decimal(10, 2)  // Harga jual saat transaksi
  subtotal    Decimal  @db.Decimal(10, 2)  // quantity * sellPrice
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StockLog {
  id          Int       @id @default(autoincrement())
  productId   Int
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int       // Positif (barang masuk) atau negatif (barang keluar)
  type        StockLogType    // PURCHASE, SALE, ADJUSTMENT
  buyPrice    Decimal?  @db.Decimal(10, 2)  // Harga beli saat restock
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  notes       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  password   String     // Disimpan sebagai hash
  fullName   String
  role       String     @default("KASIR")  // ADMIN, KASIR
  isActive   Boolean    @default(true)
  orders     Order[]
  stockLogs  StockLog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}


enum StockLogType {
  PURCHASE
  SALE
  ADJUSTMENT
  SPOILAGE
  RETURN_CUSTOMER
  RETURN_SUPPLIER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

